server {
    listen 80;
    server_name nginx;
    index  index.htm;

    # enable compression
    gzip on;
    gzip_proxied any;
    gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        application/javascript
        application/x-javascript
        application/json;

    # Cache
    add_header Cache-Control public;
    expires 1h;

    # Remove version from response headers
    server_tokens off;


    location /response-to-tweets {
        proxy_pass http://neo4j:7474/db/data/cypher;
        proxy_method POST;
        proxy_set_body "{ \"query\": \"MATCH (i:USER)-[w:WRITE]->(t:TWEET)<-[r:REPLY]-(o:TWEET) <-[:WRITE]-(u:USER) WHERE i.ID <> u.ID WITH t, count(r) as nb_reply ORDER BY nb_reply DESC LIMIT 20 WITH t MATCH (x:USER)-[xw:WRITE]->(t:TWEET)<-[rz:REPLY]-(z:TWEET) <-[wy:WRITE]-(y:USER) RETURN *\"}";
        proxy_set_header Accept "application/json; charset=UTF-8";
        proxy_set_header Content-Type "application/json";
    }

    location /mention-to-tweets {
        proxy_pass http://neo4j:7474/db/data/cypher;
        proxy_method POST;
        proxy_set_body "{ \"query\": \"MATCH (u:USER)<-[m:MENTION]-(t:TWEET)<-[w:WRITE]-(v:USER) WITH u, count(m) as NB_TWEETS_MENTIONANT_I ORDER BY NB_TWEETS_MENTIONANT_I DESC LIMIT 5 WITH collect(u) as IMPORTANT MATCH (u1:USER)<-[m1:MENTION]-(t1:TWEET)<-[w1:WRITE]-(v1:USER) WHERE u1 in IMPORTANT RETURN * LIMIT 500\"}";
        proxy_set_header Accept "application/json; charset=UTF-8";
        proxy_set_header Content-Type "application/json";
    }
}

